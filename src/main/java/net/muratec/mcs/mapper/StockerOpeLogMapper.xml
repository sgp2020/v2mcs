<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.muratec.mcs.mapper.StockerOpeLogMapper" >
  <resultMap id="BaseResultMap" type="net.muratec.mcs.model.StockerOpeLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    <id column="TIME" property="time" jdbcType="VARCHAR" />
    <id column="TSC_ID" property="tscId" jdbcType="DECIMAL" />
    <result column="ASSIGN_WAIT_MIN_TIME" property="assignWaitMinTime" jdbcType="DECIMAL" />
    <result column="ASSIGN_WAIT_MAX_TIME" property="assignWaitMaxTime" jdbcType="DECIMAL" />
    <result column="ASSIGN_WAIT_TOTAL_TIME" property="assignWaitTotalTime" jdbcType="DECIMAL" />
    <result column="ACTIVE_MIN_TIME" property="activeMinTime" jdbcType="DECIMAL" />
    <result column="ACTIVE_MAX_TIME" property="activeMaxTime" jdbcType="DECIMAL" />
    <result column="ACTIVE_TOTAL_TIME" property="activeTotalTime" jdbcType="DECIMAL" />
    <result column="OPE_COUNT" property="opeCount" jdbcType="DECIMAL" />
    <result column="ERR_COUNT" property="errCount" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    TIME, TSC_ID, ASSIGN_WAIT_MIN_TIME, ASSIGN_WAIT_MAX_TIME, ASSIGN_WAIT_TOTAL_TIME, 
    ACTIVE_MIN_TIME, ACTIVE_MAX_TIME, ACTIVE_TOTAL_TIME, OPE_COUNT, ERR_COUNT
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="net.muratec.mcs.model.StockerOpeLogExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from STOCKER_OPE_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="net.muratec.mcs.model.StockerOpeLogKey" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    select 
    <include refid="Base_Column_List" />
    from STOCKER_OPE_LOG
    where TIME = #{time,jdbcType=VARCHAR}
      and TSC_ID = #{tscId,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="net.muratec.mcs.model.StockerOpeLogKey" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    delete from STOCKER_OPE_LOG
    where TIME = #{time,jdbcType=VARCHAR}
      and TSC_ID = #{tscId,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="net.muratec.mcs.model.StockerOpeLogExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    delete from STOCKER_OPE_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.muratec.mcs.model.StockerOpeLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    insert into STOCKER_OPE_LOG (TIME, TSC_ID, ASSIGN_WAIT_MIN_TIME, 
      ASSIGN_WAIT_MAX_TIME, ASSIGN_WAIT_TOTAL_TIME, 
      ACTIVE_MIN_TIME, ACTIVE_MAX_TIME, ACTIVE_TOTAL_TIME, 
      OPE_COUNT, ERR_COUNT)
    values (#{time,jdbcType=VARCHAR}, #{tscId,jdbcType=DECIMAL}, #{assignWaitMinTime,jdbcType=DECIMAL}, 
      #{assignWaitMaxTime,jdbcType=DECIMAL}, #{assignWaitTotalTime,jdbcType=DECIMAL}, 
      #{activeMinTime,jdbcType=DECIMAL}, #{activeMaxTime,jdbcType=DECIMAL}, #{activeTotalTime,jdbcType=DECIMAL}, 
      #{opeCount,jdbcType=DECIMAL}, #{errCount,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="net.muratec.mcs.model.StockerOpeLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    insert into STOCKER_OPE_LOG
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="time != null" >
        TIME,
      </if>
      <if test="tscId != null" >
        TSC_ID,
      </if>
      <if test="assignWaitMinTime != null" >
        ASSIGN_WAIT_MIN_TIME,
      </if>
      <if test="assignWaitMaxTime != null" >
        ASSIGN_WAIT_MAX_TIME,
      </if>
      <if test="assignWaitTotalTime != null" >
        ASSIGN_WAIT_TOTAL_TIME,
      </if>
      <if test="activeMinTime != null" >
        ACTIVE_MIN_TIME,
      </if>
      <if test="activeMaxTime != null" >
        ACTIVE_MAX_TIME,
      </if>
      <if test="activeTotalTime != null" >
        ACTIVE_TOTAL_TIME,
      </if>
      <if test="opeCount != null" >
        OPE_COUNT,
      </if>
      <if test="errCount != null" >
        ERR_COUNT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="time != null" >
        #{time,jdbcType=VARCHAR},
      </if>
      <if test="tscId != null" >
        #{tscId,jdbcType=DECIMAL},
      </if>
      <if test="assignWaitMinTime != null" >
        #{assignWaitMinTime,jdbcType=DECIMAL},
      </if>
      <if test="assignWaitMaxTime != null" >
        #{assignWaitMaxTime,jdbcType=DECIMAL},
      </if>
      <if test="assignWaitTotalTime != null" >
        #{assignWaitTotalTime,jdbcType=DECIMAL},
      </if>
      <if test="activeMinTime != null" >
        #{activeMinTime,jdbcType=DECIMAL},
      </if>
      <if test="activeMaxTime != null" >
        #{activeMaxTime,jdbcType=DECIMAL},
      </if>
      <if test="activeTotalTime != null" >
        #{activeTotalTime,jdbcType=DECIMAL},
      </if>
      <if test="opeCount != null" >
        #{opeCount,jdbcType=DECIMAL},
      </if>
      <if test="errCount != null" >
        #{errCount,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.muratec.mcs.model.StockerOpeLogExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    select count(*) from STOCKER_OPE_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    update STOCKER_OPE_LOG
    <set >
      <if test="record.time != null" >
        TIME = #{record.time,jdbcType=VARCHAR},
      </if>
      <if test="record.tscId != null" >
        TSC_ID = #{record.tscId,jdbcType=DECIMAL},
      </if>
      <if test="record.assignWaitMinTime != null" >
        ASSIGN_WAIT_MIN_TIME = #{record.assignWaitMinTime,jdbcType=DECIMAL},
      </if>
      <if test="record.assignWaitMaxTime != null" >
        ASSIGN_WAIT_MAX_TIME = #{record.assignWaitMaxTime,jdbcType=DECIMAL},
      </if>
      <if test="record.assignWaitTotalTime != null" >
        ASSIGN_WAIT_TOTAL_TIME = #{record.assignWaitTotalTime,jdbcType=DECIMAL},
      </if>
      <if test="record.activeMinTime != null" >
        ACTIVE_MIN_TIME = #{record.activeMinTime,jdbcType=DECIMAL},
      </if>
      <if test="record.activeMaxTime != null" >
        ACTIVE_MAX_TIME = #{record.activeMaxTime,jdbcType=DECIMAL},
      </if>
      <if test="record.activeTotalTime != null" >
        ACTIVE_TOTAL_TIME = #{record.activeTotalTime,jdbcType=DECIMAL},
      </if>
      <if test="record.opeCount != null" >
        OPE_COUNT = #{record.opeCount,jdbcType=DECIMAL},
      </if>
      <if test="record.errCount != null" >
        ERR_COUNT = #{record.errCount,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    update STOCKER_OPE_LOG
    set TIME = #{record.time,jdbcType=VARCHAR},
      TSC_ID = #{record.tscId,jdbcType=DECIMAL},
      ASSIGN_WAIT_MIN_TIME = #{record.assignWaitMinTime,jdbcType=DECIMAL},
      ASSIGN_WAIT_MAX_TIME = #{record.assignWaitMaxTime,jdbcType=DECIMAL},
      ASSIGN_WAIT_TOTAL_TIME = #{record.assignWaitTotalTime,jdbcType=DECIMAL},
      ACTIVE_MIN_TIME = #{record.activeMinTime,jdbcType=DECIMAL},
      ACTIVE_MAX_TIME = #{record.activeMaxTime,jdbcType=DECIMAL},
      ACTIVE_TOTAL_TIME = #{record.activeTotalTime,jdbcType=DECIMAL},
      OPE_COUNT = #{record.opeCount,jdbcType=DECIMAL},
      ERR_COUNT = #{record.errCount,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.muratec.mcs.model.StockerOpeLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    update STOCKER_OPE_LOG
    <set >
      <if test="assignWaitMinTime != null" >
        ASSIGN_WAIT_MIN_TIME = #{assignWaitMinTime,jdbcType=DECIMAL},
      </if>
      <if test="assignWaitMaxTime != null" >
        ASSIGN_WAIT_MAX_TIME = #{assignWaitMaxTime,jdbcType=DECIMAL},
      </if>
      <if test="assignWaitTotalTime != null" >
        ASSIGN_WAIT_TOTAL_TIME = #{assignWaitTotalTime,jdbcType=DECIMAL},
      </if>
      <if test="activeMinTime != null" >
        ACTIVE_MIN_TIME = #{activeMinTime,jdbcType=DECIMAL},
      </if>
      <if test="activeMaxTime != null" >
        ACTIVE_MAX_TIME = #{activeMaxTime,jdbcType=DECIMAL},
      </if>
      <if test="activeTotalTime != null" >
        ACTIVE_TOTAL_TIME = #{activeTotalTime,jdbcType=DECIMAL},
      </if>
      <if test="opeCount != null" >
        OPE_COUNT = #{opeCount,jdbcType=DECIMAL},
      </if>
      <if test="errCount != null" >
        ERR_COUNT = #{errCount,jdbcType=DECIMAL},
      </if>
    </set>
    where TIME = #{time,jdbcType=VARCHAR}
      and TSC_ID = #{tscId,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.muratec.mcs.model.StockerOpeLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 02 15:23:26 CST 2020.
    -->
    update STOCKER_OPE_LOG
    set ASSIGN_WAIT_MIN_TIME = #{assignWaitMinTime,jdbcType=DECIMAL},
      ASSIGN_WAIT_MAX_TIME = #{assignWaitMaxTime,jdbcType=DECIMAL},
      ASSIGN_WAIT_TOTAL_TIME = #{assignWaitTotalTime,jdbcType=DECIMAL},
      ACTIVE_MIN_TIME = #{activeMinTime,jdbcType=DECIMAL},
      ACTIVE_MAX_TIME = #{activeMaxTime,jdbcType=DECIMAL},
      ACTIVE_TOTAL_TIME = #{activeTotalTime,jdbcType=DECIMAL},
      OPE_COUNT = #{opeCount,jdbcType=DECIMAL},
      ERR_COUNT = #{errCount,jdbcType=DECIMAL}
    where TIME = #{time,jdbcType=VARCHAR}
      and TSC_ID = #{tscId,jdbcType=DECIMAL}
  </update>
  
  <!-- 以下独自SQL -->
  <!-- レコード取得範囲決定部 -->
  <resultMap id="SearchResultMap" type="net.muratec.mcs.model.StockerOpeLogModel">
   <id column="TIME" jdbcType="VARCHAR" property="time" />
   <result column="RN" jdbcType="DECIMAL" property="rn" />
   <result column="TSC_ID" jdbcType="VARCHAR" property="tscId" />
   <result column="ASSIGN_WAIT_MAX_TIME" jdbcType="DECIMAL" property="assignWaitMaxTime" />
   <result column="ASSIGN_WAIT_MIN_TIME" jdbcType="DECIMAL" property="assignWaitMinTime" />
   <result column="ASSIGN_WAIT_AVE_TIME" jdbcType="DECIMAL" property="assignWaitAveTime" />
   <result column="ACTIVE_MAX_TIME" jdbcType="DECIMAL" property="activeWaitMaxTime" />
   <result column="ACTIVE_MIN_TIME" jdbcType="DECIMAL" property="activeWaitMinTime" />
   <result column="ACTIVE_AVE_TIME" jdbcType="DECIMAL" property="activeWaitAveTime" />
   <result column="ACTIVE_TOTAL_TIME" jdbcType="DECIMAL" property="activeTotalTime" />
   <result column="DOWN_TIME" jdbcType="DECIMAL" property="downTime" />
   <result column="OPE_COUNT" jdbcType="DECIMAL" property="transferCount" />
   <result column="ERR_COUNT" jdbcType="DECIMAL" property="errorCount" />
   <result column="MCBF" jdbcType="DECIMAL" property="mCBF" />
  </resultMap>
  <sql id="selectRecordWhere">
    <where>
      <if test="fromRecordNum != null and toRecordNum != null">
        AND rn between #{fromRecordNum,jdbcType=DECIMAL} and #{toRecordNum,jdbcType=DECIMAL}
      </if>
    </where>
  </sql>

  <sql id="selectBoxWhere">
    <where>
   	  <if test="unit == '0'.toString()">
        AND (flg &gt;= 0 or down_time &lt;&gt; 0)
      </if>
      <if test="unit == '1'.toString()">
        AND down_time &lt;&gt; 0
      </if>
    </where>
  </sql>

 
  <select id="getCountByDay" parameterType="net.muratec.mcs.entity.hist.ReqGetStockerStatisticsHistEntity" resultType="java.lang.Integer"> 
select 
 	COUNT(*) 	 
 from (
	 	SELECT 
	 	c.flg,
	    c.time,
	    c.time_to,
	    c.tsc_id,
	    c.assign_wait_max_time,
	    c.assign_wait_min_time,
	    c.assign_wait_ave_time,
	    c.active_max_time,
	    c.active_min_time,
	    c.active_ave_time,
	    c.active_total_time,
	    c.ope_count,
	    c.err_count,
	    c.mcbf, 
    	( SELECT  
				    Round(SUM( ( TO_DATE( ( SUBSTR( tbl.end_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.end_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.end_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.end_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) -  
						   TO_DATE( ( SUBSTR( tbl.start_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.start_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.start_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.start_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) )*24*3600 ))   
			 FROM   ( SELECT tsc_id,  
							 ( CASE WHEN start_time &lt; c.TIME THEN c.TIME  
								 ELSE start_time  
							   END ) start_time,  
							 ( CASE WHEN end_time = '9999999999999999' THEN c.TIME_TO 
								 WHEN end_time &gt; c.TIME_TO THEN c.TIME_TO 
								 ELSE end_time  
							   END ) end_time  
					   FROM down_time  
					   WHERE  end_time &lt;&gt; '9999999999999999' AND  
							  start_time &lt; c.TIME_TO  AND  
							  end_time &gt; c.TIME  AND   
							  start_time &lt; end_time AND  
							  tsc_id = #{tscId} ) tbl  
	   GROUP BY tbl.tsc_id ) down_time
       
       
       from (
        
  
	  		SELECT
	      		a.flg,	
				(b.DAY_TIME || '000000' ) TIME,
	      		(b.DAY_TIME_TO || '000000' ) TIME_TO,
				(select tsc.TSC_ABBREVIATION from tsc where tsc.tsc_id = #{tscId}) tsc_id, 
				nvl(assign_wait_max_time, 0) assign_wait_max_time,
				nvl(assign_wait_min_time, 0) assign_wait_min_time,
				nvl(assign_wait_ave_time, 0) assign_wait_ave_time,
				nvl(active_max_time, 0) active_max_time,
				nvl(active_min_time, 0) active_min_time,
				nvl(active_ave_time, 0) active_ave_time,
				nvl(active_total_time,0) active_total_time,
				nvl(ope_count, 0) ope_count,
				nvl(err_count,0) err_count,
				nvl(mcbf,0) mcbf 
			FROM
			(
					(SELECT 
						 
	    				 0 flg,
	             		 SUBSTR(TIME,0,8) TIME,
	    				 tsc_id,
	    				 MAX(assign_wait_max_time) assign_wait_max_time,
	    				 MIN(assign_wait_min_time) assign_wait_min_time,
	    				 ROUND( (
							    CASE SUM( ope_count )
							      WHEN 0
							      THEN 0
							      ELSE SUM( assign_wait_total_time )/SUM( ope_count )
							    END ), 0 ) assign_wait_ave_time,
					     MAX(active_max_time) active_max_time,
					     MIN(active_min_time) active_min_time,
					     ROUND( (
					     		CASE SUM( ope_count )
					      			WHEN 0
					      			THEN 0
					      			ELSE SUM( active_total_time )/SUM( ope_count )
					    			END ), 0 ) active_ave_time,
	    				SUM(active_total_time) active_total_time,
					    SUM(ope_count) ope_count,
					    SUM(err_count) err_count,
					    ROUND( (
					    	CASE SUM( err_count )
					      	WHEN 0
					      	THEN SUM( ope_count) /1
					      	ELSE SUM( ope_count )/SUM( err_count )
					    	END ), 0 ) mcbf,
					    SUM(assign_wait_total_time) assign_wait_total_time
					    
	  				FROM stocker_ope_log
		   			WHERE stocker_ope_log.tsc_id = #{tscId}
		   			GROUP BY tsc_id,SUBSTR(TIME,0,8)  
		   			) a
		   			RIGHT JOIN
		   			(
					  	SELECT  TO_CHAR(TO_DATE(#{dateFrom1}, 'YYYY/MM/DD') + ROWNUM - 1, 'YYYYMMDD') DAY_TIME,
					  			TO_CHAR(TO_DATE(#{dateFrom1}, 'YYYY/MM/DD') + ROWNUM, 'YYYYMMDD') DAY_TIME_TO
					    FROM DUAL
					    CONNECT BY ROWNUM &lt;= TO_DATE(#{dateTo1}, 'YYYY/MM/DD') - TO_DATE(#{dateFrom1}, 'YYYY/MM/DD')
				    ) b
		   			ON a.TIME = b.DAY_TIME
				)
	      	) c 
     )

    
  </select>
  
  
  <select id="getCountByHour" parameterType="net.muratec.mcs.entity.hist.ReqGetStockerStatisticsHistEntity" resultType="java.lang.Integer"> 
  select 
 	Count(*) 	 
 from (
	 	SELECT 
	 	c.flg,
	    c.time,
	    c.time_to,
	    c.tsc_id,
	    c.assign_wait_max_time,
	    c.assign_wait_min_time,
	    c.assign_wait_ave_time,
	    c.active_max_time,
	    c.active_min_time,
	    c.active_ave_time,
	    c.active_total_time,
	    c.ope_count,
	    c.err_count,
	    c.mcbf, 
    	( SELECT  
				    Round(SUM( ( TO_DATE( ( SUBSTR( tbl.end_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.end_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.end_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.end_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) -  
						   TO_DATE( ( SUBSTR( tbl.start_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.start_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.start_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.start_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) )*24*3600 ))   
			 FROM   ( SELECT tsc_id,  
							 ( CASE WHEN start_time &lt; c.TIME THEN c.TIME  
								 ELSE start_time  
							   END ) start_time,  
							 ( CASE WHEN end_time = '9999999999999999' THEN c.TIME_TO 
								 WHEN end_time &gt; c.TIME_TO THEN c.TIME_TO 
								 ELSE end_time  
							   END ) end_time  
					   FROM down_time  
					   WHERE  end_time &lt;&gt; '9999999999999999' AND  
							  start_time &lt; c.TIME_TO  AND  
							  end_time &gt; c.TIME  AND   
							  start_time &lt; end_time AND  
							  tsc_id = #{tscId} ) tbl  
	   GROUP BY tbl.tsc_id ) down_time
       
       
       from (
        
  
	  		SELECT
	      		a.flg,	
				(b.DAY_TIME || '0000' ) TIME,
	      		(b.DAY_TIME_TO || '0000' ) TIME_TO,
				(select tsc.TSC_ABBREVIATION from tsc where tsc.tsc_id = #{tscId}) tsc_id, 
				nvl(assign_wait_max_time, 0) assign_wait_max_time,
				nvl(assign_wait_min_time, 0) assign_wait_min_time,
				nvl(assign_wait_ave_time, 0) assign_wait_ave_time,
				nvl(active_max_time, 0) active_max_time,
				nvl(active_min_time, 0) active_min_time,
				nvl(active_ave_time, 0) active_ave_time,
				nvl(active_total_time,0) active_total_time,
				nvl(ope_count, 0) ope_count,
				nvl(err_count,0) err_count,
				nvl(mcbf,0) mcbf
			FROM
			(
					(SELECT 
						 
	    				 0 flg,
	             		 TIME,
	    				 tsc_id,
	    				 MAX(assign_wait_max_time) assign_wait_max_time,
	    				 MIN(assign_wait_min_time) assign_wait_min_time,
	    				 ROUND( (
							    CASE SUM( ope_count )
							      WHEN 0
							      THEN 0
							      ELSE SUM( assign_wait_total_time )/SUM( ope_count )
							    END ), 0 ) assign_wait_ave_time,
					     MAX(active_max_time) active_max_time,
					     MIN(active_min_time) active_min_time,
					     ROUND( (
					     		CASE SUM( ope_count )
					      			WHEN 0
					      			THEN 0
					      			ELSE SUM( active_total_time )/SUM( ope_count )
					    			END ), 0 ) active_ave_time,
	    				SUM(active_total_time) active_total_time,
					    SUM(ope_count) ope_count,
					    SUM(err_count) err_count,
					    ROUND( (
					    	CASE SUM( err_count )
					      	WHEN 0
					      	THEN SUM( ope_count) /1
					      	ELSE SUM( ope_count )/SUM( err_count )
					    	END ), 0 ) mcbf,
					    SUM(assign_wait_total_time) assign_wait_total_time
					    
	  				FROM stocker_ope_log
		   			WHERE stocker_ope_log.tsc_id = #{tscId}
		   			GROUP BY tsc_id,TIME 
		   			) a
		   			RIGHT JOIN
		   			(
		   				SELECT  TO_CHAR(to_date(#{dateFrom1},'YYYY/MM/DD HH24:MI:SS') + (ROWNUM-1)/24,'YYYYMMDDHH24') DAY_TIME,
	            			    TO_CHAR(to_date(#{dateFrom1},'YYYY/MM/DD HH24:MI:SS') + ROWNUM/24,'YYYYMMDDHH24') DAY_TIME_TO 
						FROM DUAL
						CONNECT BY ROWNUM &lt;= (TO_DATE(#{dateTo1}, 'YYYY/MM-DD') - TO_DATE(#{dateFrom1}, 'YYYY/MM/DD')) * 24 
		   			) b
		   			ON a.TIME = b.DAY_TIME
				)
	      	) c 
     )
     <include refid="selectBoxWhere" /> 
   
  </select>
  
  <!--  StockerStatisticsHistory情報一覧を取得する。 -->
  <select id="selectStockerStatisticsHistListByDay" parameterType="net.muratec.mcs.entity.hist.ReqGetStockerStatisticsHistEntity" resultMap="SearchResultMap">
 select 
 	rn,
 	time,
 	tsc_id,
	assign_wait_max_time,
	assign_wait_min_time,
	assign_wait_ave_time,
	active_max_time,
	active_min_time,
	active_ave_time,
	active_total_time, 	
 	nvl(down_time,0) down_time,
	ope_count,
	err_count,
	mcbf 
from ( 

  select 
 	row_number() over(order by time ) rn,
 	time,
 	tsc_id,
	assign_wait_max_time,
	assign_wait_min_time,
	assign_wait_ave_time,
	active_max_time,
	active_min_time,
	active_ave_time,
	active_total_time, 	
 	nvl(down_time,0) down_time,
	ope_count,
	err_count,
	mcbf  	 
 from (
	 	SELECT 
	 	c.flg,
	    c.time,
	    c.time_to,
	    c.tsc_id,
	    c.assign_wait_max_time,
	    c.assign_wait_min_time,
	    c.assign_wait_ave_time,
	    c.active_max_time,
	    c.active_min_time,
	    c.active_ave_time,
	    c.active_total_time,
	    c.ope_count,
	    c.err_count,
	    c.mcbf, 
    	( SELECT  
				    Round(SUM( ( TO_DATE( ( SUBSTR( tbl.end_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.end_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.end_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.end_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) -  
						   TO_DATE( ( SUBSTR( tbl.start_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.start_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.start_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.start_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) )*24*3600 ))   
			 FROM   ( SELECT tsc_id,  
							 ( CASE WHEN start_time &lt; c.TIME THEN c.TIME  
								 ELSE start_time  
							   END ) start_time,  
							 ( CASE WHEN end_time = '9999999999999999' THEN c.TIME_TO 
								 WHEN end_time &gt; c.TIME_TO THEN c.TIME_TO 
								 ELSE end_time  
							   END ) end_time  
					   FROM down_time  
					   WHERE  end_time &lt;&gt; '9999999999999999' AND  
							  start_time &lt; c.TIME_TO  AND  
							  end_time &gt; c.TIME  AND   
							  start_time &lt; end_time AND  
							  tsc_id = #{tscId} ) tbl  
	   GROUP BY tbl.tsc_id ) down_time
       
       
       from (
        
  
	  		SELECT
	      		a.flg,	
				(b.DAY_TIME || '000000' ) TIME,
	      		(b.DAY_TIME_TO || '000000' ) TIME_TO,
				(select tsc.TSC_ABBREVIATION from tsc where tsc.tsc_id = #{tscId}) tsc_id, 
				nvl(assign_wait_max_time, 0) assign_wait_max_time,
				nvl(assign_wait_min_time, 0) assign_wait_min_time,
				nvl(assign_wait_ave_time, 0) assign_wait_ave_time,
				nvl(active_max_time, 0) active_max_time,
				nvl(active_min_time, 0) active_min_time,
				nvl(active_ave_time, 0) active_ave_time,
				nvl(active_total_time,0) active_total_time,
				nvl(ope_count, 0) ope_count,
				nvl(err_count,0) err_count,
				nvl(mcbf,0) mcbf
			FROM
			(
					(SELECT 
						 
	    				 0 flg,
	             		 SUBSTR(TIME,0,8) TIME,
	    				 tsc_id,
	    				 MAX(assign_wait_max_time) assign_wait_max_time,
	    				 MIN(assign_wait_min_time) assign_wait_min_time,
	    				 ROUND( (
							    CASE SUM( ope_count )
							      WHEN 0
							      THEN 0
							      ELSE SUM( assign_wait_total_time )/SUM( ope_count )
							    END ), 0 ) assign_wait_ave_time,
					     MAX(active_max_time) active_max_time,
					     MIN(active_min_time) active_min_time,
					     ROUND( (
					     		CASE SUM( ope_count )
					      			WHEN 0
					      			THEN 0
					      			ELSE SUM( active_total_time )/SUM( ope_count )
					    			END ), 0 ) active_ave_time,
	    				SUM(active_total_time) active_total_time,
					    SUM(ope_count) ope_count,
					    SUM(err_count) err_count,
					    ROUND( (
					    	CASE SUM( err_count )
					      	WHEN 0
					      	THEN SUM( ope_count) /1
					      	ELSE SUM( ope_count )/SUM( err_count )
					    	END ), 0 ) mcbf,
					    SUM(assign_wait_total_time) assign_wait_total_time
					    
	  				FROM stocker_ope_log
		   			WHERE stocker_ope_log.tsc_id = #{tscId}
		   			GROUP BY tsc_id,SUBSTR(TIME,0,8)  
		   			) a
		   			RIGHT JOIN
		   			(
					  	SELECT  TO_CHAR(TO_DATE(#{dateFrom1}, 'YYYY/MM/DD') + ROWNUM - 1, 'YYYYMMDD') DAY_TIME,
					  			TO_CHAR(TO_DATE(#{dateFrom1}, 'YYYY/MM/DD') + ROWNUM, 'YYYYMMDD') DAY_TIME_TO
					    FROM DUAL
					    CONNECT BY ROWNUM &lt;= TO_DATE(#{dateTo1}, 'YYYY/MM/DD') - TO_DATE(#{dateFrom1}, 'YYYY/MM/DD')
				    ) b
		   			ON a.TIME = b.DAY_TIME
				)
	      	) c 
     )
     )
     <include refid="selectRecordWhere" /> 
     ORDER BY TIME      
  </select>
  
  <select id="selectStockerStatisticsHistListByHour" parameterType="net.muratec.mcs.entity.hist.ReqGetStockerStatisticsHistEntity" resultMap="SearchResultMap">
  select 
 	   rn,
 	   time,
 	   tsc_id,
	   assign_wait_max_time,
	   assign_wait_min_time,
	   assign_wait_ave_time,
	   active_max_time,
	   active_min_time,
	   active_ave_time,
	   active_total_time, 	
 	   nvl(down_time,0) down_time,
	   ope_count,
	   err_count,
	   mcbf  
  
  from (
  
  select 
 	   row_number() over(order by time ) rn,
 	   time,
 	   tsc_id,
	   assign_wait_max_time,
	   assign_wait_min_time,
	   assign_wait_ave_time,
	   active_max_time,
	   active_min_time,
	   active_ave_time,
	   active_total_time, 	
 	   nvl(down_time,0) down_time,
	   ope_count,
	   err_count,
	   mcbf  	 
 from (
	 	SELECT 
	 		c.flg,
	    	c.time,
	    	c.time_to,
	    	c.tsc_id,
	    	c.assign_wait_max_time,
	    	c.assign_wait_min_time,
	    	c.assign_wait_ave_time,
	    	c.active_max_time,
	    	c.active_min_time,
	    	c.active_ave_time,
	    	c.active_total_time,
	    	c.ope_count,
	    	c.err_count,
	    	c.mcbf, 
    		( 
    		
    			SELECT  
				    Round(SUM( ( TO_DATE( ( SUBSTR( tbl.end_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.end_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.end_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.end_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.end_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) -  
						   TO_DATE( ( SUBSTR( tbl.start_time, 1,  4 ) || '-' ||  
									  SUBSTR( tbl.start_time, 5,  2 ) || '-' ||  
									  SUBSTR( tbl.start_time, 7,  2 ) || ' ' ||  
									  SUBSTR( tbl.start_time, 9,  2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 11, 2 ) || ':' ||  
									  SUBSTR( tbl.start_time, 13, 2 ) ),   
									  'YYYY-MM-DD HH24:MI:SS' ) )*24*3600 ))   
			 	FROM   ( 
			 				SELECT 
			 					tsc_id,  
							    ( 
							    CASE WHEN start_time &lt; c.TIME 
							    	     THEN c.TIME  
							    	     ELSE start_time  
							    END ) start_time,  
							    ( 
							    CASE WHEN end_time = '9999999999999999' 
							    	     THEN c.TIME_TO 
							    	 WHEN end_time &gt; c.TIME_TO 
							    	 	 THEN c.TIME_TO  
							    	 	 ELSE end_time  
							    END ) end_time  
					   		FROM down_time  
					   		WHERE  
					   			end_time &lt;&gt; '9999999999999999' AND  
							  	start_time &lt; c.TIME_TO  AND  
							  	end_time &gt; c.TIME  AND   
							  	start_time &lt; end_time AND  
							  	tsc_id = #{tscId} 
					    ) tbl  
	   			GROUP BY tbl.tsc_id ) down_time
       
       
       		from 
       		(
        
  
	  			SELECT
		      		a.flg,	
					(b.DAY_TIME || '0000' ) TIME,
		      		(b.DAY_TIME_TO || '0000' ) TIME_TO,
					(select tsc.TSC_ABBREVIATION from tsc where tsc.tsc_id = #{tscId}) tsc_id, 
					nvl(assign_wait_max_time, 0) assign_wait_max_time,
					nvl(assign_wait_min_time, 0) assign_wait_min_time,
					nvl(assign_wait_ave_time, 0) assign_wait_ave_time,
					nvl(active_max_time, 0) active_max_time,
					nvl(active_min_time, 0) active_min_time,
					nvl(active_ave_time, 0) active_ave_time,
					nvl(active_total_time,0) active_total_time,
					nvl(ope_count, 0) ope_count,
					nvl(err_count,0) err_count,
					nvl(mcbf,0) mcbf
				FROM
				(
					(
					
						SELECT 
						 
		    				 0 flg,
		             		 TIME,
		    				 tsc_id,
		    				 MAX(assign_wait_max_time) assign_wait_max_time,
		    				 MIN(assign_wait_min_time) assign_wait_min_time,
		    				 ROUND( (
								    CASE SUM( ope_count )
								      WHEN 0
								      THEN 0
								      ELSE SUM( assign_wait_total_time )/SUM( ope_count )
								    END ), 0 ) assign_wait_ave_time,
						     MAX(active_max_time) active_max_time,
						     MIN(active_min_time) active_min_time,
						     ROUND( (
						     		CASE SUM( ope_count )
						      			WHEN 0
						      			THEN 0
						      			ELSE SUM( active_total_time )/SUM( ope_count )
						    			END ), 0 ) active_ave_time,
		    				SUM(active_total_time) active_total_time,
						    SUM(ope_count) ope_count,
						    SUM(err_count) err_count,
						    ROUND( (
						    	CASE SUM( err_count )
						      	WHEN 0
						      	THEN SUM( ope_count) /1
						      	ELSE SUM( ope_count )/SUM( err_count )
						    	END ), 0 ) mcbf,
						    SUM(assign_wait_total_time) assign_wait_total_time
					    
	  					FROM stocker_ope_log
		   				WHERE stocker_ope_log.tsc_id = #{tscId}
		   				GROUP BY tsc_id,TIME 
		   			) a
		   			RIGHT JOIN
		   			(
		   				SELECT  TO_CHAR(to_date(#{dateFrom1},'YYYY/MM/DD HH24:MI:SS') + (ROWNUM-1)/24,'YYYYMMDDHH24') DAY_TIME,
	            			    TO_CHAR(to_date(#{dateFrom1},'YYYY/MM/DD HH24:MI:SS') + ROWNUM/24,'YYYYMMDDHH24') DAY_TIME_TO 
						FROM DUAL
						CONNECT BY ROWNUM &lt;= (TO_DATE(#{dateTo1}, 'YYYY/MM/DD') - TO_DATE(#{dateFrom1}, 'YYYY/MM/DD')) * 24 
		   			) b
		   			ON a.TIME = b.DAY_TIME
				)
	      	) c 
     )
     <include refid="selectBoxWhere" /> 
     )
     <include refid="selectRecordWhere" /> 
     ORDER BY TIME  
       
  </select>
</mapper>