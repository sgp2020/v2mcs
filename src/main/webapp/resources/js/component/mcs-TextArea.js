/**
 ******************************************************************************
 * @file        mcs-TextArea.js
 * @brief       テキストエリアに関する部品
 * @par
 * @author      CSC
 * $Id:         $
 * @attention
 *
 * Copyright (c) 2016 MURATA MACHINERY,LTD. All rights reserved.
 *
 * @note        Tabstop=2
 * ----------------------------------------------------------------------------
 * DATE       VER.        DESCRIPTION                                    AUTHOR
 * ----------------------------------------------------------------------------
 * 2016/12/26 0.1         Step1リリース                                     CSC
 ******************************************************************************
 */
/**
 ******************************************************************************
 * @brief     テキストエリアコンポーネント
 * @param     {jQuery} containerDiv 格納先のdiv要素
 * @param     {Object} attr         inputに追加適用する属性
 * @param     {Object} prop         inputに追加適用する属性
 * @return
 * @retval
 * @attention
 * @note      テキストエリアコンポーネント
 * ----------------------------------------------------------------------------
 * VER.        DESCRIPTION                                               AUTHOR
 * ----------------------------------------------------------------------------
 ******************************************************************************
 */
var McsTextArea = function(containerDiv, attr, prop) {
  // コンストラクタ
  this.init(containerDiv, attr, prop);
};
// メソッド類
McsTextArea.prototype = {
  /**
   ******************************************************************************
   * @brief     初期化
   * @param     {jQuery} containerDiv 格納先のdiv要素
   * @param     {Object} attr         inputに追加適用する属性
   * @param     {Object} prop         inputに追加適用する属性
   * @return
   * @retval
   * @attention
   * @note      初期化する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  init: function(containerDiv, attr, prop) {
    this.containerDiv = containerDiv;
    // 実際の要素を生成
    var textarea = $('<textarea class="form-control mcs-textarea" wrap="soft"></textarea>');
    if (attr)
      textarea.attr(attr);
    if (prop)
      textarea.prop(prop);
    this.textarea = textarea;
    // containerDivに追加する
    containerDiv.append(textarea);
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの高さ設定
   * @param     {Number} height 高さ（ピクセル）
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      テキストエリアの高さを設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setHeight: function(height) {
    this.textarea.height(height);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの値設定
   * @param     {String} val 値（テキスト）
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      テキストエリアの値を設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setValue: function(val) {
    this.textarea.val(val);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの入力値取得
   * @param
   * @return    {String} 入力されているテキスト
   * @retval
   * @attention
   * @note      テキストエリアに入力されている値を取得する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getValue: function() {
    return this.textarea.val();
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの入力値クリア
   * @param
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      テキストエリアの入力値をクリアして空にする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clear: function() {
    this.textarea.val('');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの活性状態設定
   * @param     {Boolean} enabled 活性ならtrue、非活性ならfalse
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      テキストエリアの活性・非活性を設定する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setEnabled: function(enabled) {
    this.textarea.prop('disabled', !enabled);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの活性状態取得
   * @param
   * @return   {Boolean} 活性ならtrue、非活性ならfalse
   * @retval
   * @attention
   * @note      テキストエリアの活性・非活性を取得する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getEnabled: function() {
    return !this.textarea.prop('disabled');
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの読み取り専用設定
   * @param     {Boolean} readonly 読み取り専用ならtrue
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      テキストエリアを読み取り専用に設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setReadonly: function(readonly) {
    this.textarea.prop('readonly', readonly);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの読み取り専用状態取得
   * @param
   * @return   {Boolean} readonly 読み取り専用ならtrue
   * @retval
   * @attention
   * @note      テキストエリアが読み取り専用かどうかを取得する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getReadonly: function() {
    return this.textarea.prop('readonly');
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアの最大長設定
   * @param     {Number} maxlength 最大長
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      テキストエリアのmaxlength（最大長）を設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setMaxLength: function(maxlength) {
    if (maxlength)
      this.textarea.attr('maxlength', maxlength);
    else
      this.textarea.removeAttr('maxlength');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアのエラー表示
   * @param     {String} errorMessage エラーメッセージ
   * @return
   * @retval
   * @attention
   * @note      テキストエリアのエラーを表示する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  addError: function(errorMessage) {
    var elm = $('<div class="mcs-component-errorText"></div>').text(errorMessage);
    this.containerDiv.append(elm);
    this.textarea.addClass('mcs-component-errorBack');
  },

  /**
   ******************************************************************************
   * @brief     テキストエリアのエラー表示クリア
   * @param
   * @return
   * @retval
   * @attention
   * @note      テキストエリアのエラーを表示をクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clearError: function() {
    this.containerDiv.find('.mcs-component-errorText').remove();
    this.textarea.removeClass('mcs-component-errorBack');
  },

  /**
   ******************************************************************************
   * @brief     jQueryオブジェクトを取得
   * @param
   * @return    {jQueryObj} jQueryオブジェクト
   * @retval
   * @attention
   * @note      jQueryオブジェクトを返す。 （注意：なるべく使用しないこと）
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getJq: function() {
    return this.textarea;
  },

  /**
   ******************************************************************************
   * @brief     オブジェクトへの部品追加
   * @param  {jQueryObj} jQueryObj jQueryオブジェクト
   * @return    {McsTextArea} このコンポーネント
   * @retval
   * @attention
   * @note      指定のjQueryObjの配下にこの部品を追加する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  appendTo: function(jQueryObj) {
    jQueryObj.append(this.containerDiv);
    return this;
  },

  end: 'end'
};
