/**
 ******************************************************************************
 * @file        mcs-ComponentManager.js
 * @brief       コーポネントマネージャーを管理する部品
 * @par
 * @author      CSC
 * $Id:         $
 * @attention
 *
 * Copyright (c) 2016 MURATA MACHINERY,LTD. All rights reserved.
 *
 * @note        Tabstop=2
 * ----------------------------------------------------------------------------
 * DATE       VER.        DESCRIPTION                                    AUTHOR
 * ----------------------------------------------------------------------------
 * 2016/12/26 0.1         Step1リリース                                     CSC
 ******************************************************************************
 */
/**
 ******************************************************************************
 * @brief       呼び出し処理
 * @return
 * @retval
 * @attention
 * @note        呼び出し処理を実施する。
 * ----------------------------------------------------------------------------
 * VER.        DESCRIPTION                                               AUTHOR
 * ----------------------------------------------------------------------------
 ******************************************************************************
 */
function McsComponentManager() {
  this.init();
}
McsComponentManager.prototype = {

  /**
   ******************************************************************************
   * @brief       初期化処理
   * @return
   * @retval
   * @attention
   * @note        初期化処理を実施する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  init: function() {
    this.componentMap = {};
  },

  /**
   ******************************************************************************
   * @brief       コンポーネント追加処理
   * @param       {String} name         名前（ID）
   * @param       {Object} component    コンポーネント
   * @return      {McsComponentManager} このコンポーネント
   * @retval
   * @attention
   * @note        コンポーネントを追加する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  add: function(name, component) {
    this.componentMap[name] = component;
    return this;
  },

  /**
   ******************************************************************************
   * @brief       コンポーネントまとめて追加する
   * @param       {Object} componentMap キーが名前、値がコンポーネントのオブジェクト
   * @return      {McsComponentManager} このコンポーネント
   * @retval
   * @attention
   * @note        管理コンポーネントをまとめて追加する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  addMap: function(componentMap) {
    for ( var name in componentMap) {
      if (componentMap.hasOwnProperty(name)) {
        this.add(name, componentMap[name]);
      }
    }
    return this;
  },

  /**
   ******************************************************************************
   * @brief       コンポーネント取得処理
   * @param       {String} name         名前（ID）
   * @return      {Object}              コンポーネント
   * @retval
   * @attention
   * @note        管理コンポーネントを取得する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  get: function(name) {
    return this.componentMap[name];
  },

  /**
   ******************************************************************************
   * @brief       コンポーネントマップ取得処理
   * @return      {Object} コンポーネントのマップ { name: component }の形式
   * @retval
   * @attention
   * @note        管理コンポーネントマップを取得する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getMap: function() {
    return this.componentMap;
  },

  /**
   ******************************************************************************
   * @brief       コンポーネントを削除処理
   * @param       {String} name         名前（ID）
   * @return      {McsComponentManager} このコンポーネント
   * @retval
   * @attention
   * @note        コンポーネントを管理から削除する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  remove: function(name) {
    this.componentMap[name] = null;
    return this;
  },

  /**
   ******************************************************************************
   * @brief       全コンポーネントを削除処理
   * @return      {McsComponentManager} このコンポーネント
   * @retval
   * @attention
   * @note        全コンポーネントを管理から削除する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  removeAll: function() {
    this.componentMap = {};
    return this;
  },

  /**
   ******************************************************************************
   * @brief       エラー設定処理
   * @param       {Array} errorInfoList エラー情報リスト
   * @return      {McsErrorManager}     このコンポーネント
   * @retval
   * @attention
   * @note        エラーをまとめて設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setErrors: function(errorInfoList) {
    this.clearErrors(); // 一旦クリア
    for (var i = 0; i < errorInfoList.length; i++) {
      var id = errorInfoList[i].id;
      var errorMessage = errorInfoList[i].errorMessage;
      var component = this.componentMap[id];
      if (component && component.addError) {
        component.addError(errorMessage);
      }
    }
    return this;
  },

  /**
   ******************************************************************************
   * @brief       エラークリア処理
   * @return      {McsErrorManager}     このコンポーネント
   * @retval
   * @attention
   * @note        エラーをまとめてクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clearErrors: function() {
    for ( var id in this.componentMap) {
      if (this.componentMap.hasOwnProperty(id)) {
        var component = this.componentMap[id];
        if (component && component.clearError) {
          component.clearError();
        }
      }
    }
    return this;
  }
};
