/**
 ******************************************************************************
 * @file        mcs-SelectBox.js
 * @brief       セレクトボックスに関する部品
 * @par
 * @author      CSC
 * $Id:         $
 * @attention
 *
 * Copyright (c) 2016 MURATA MACHINERY,LTD. All rights reserved.
 *
 * @note        Tabstop=2
 * ----------------------------------------------------------------------------
 * DATE       VER.        DESCRIPTION                                    AUTHOR
 * ----------------------------------------------------------------------------
 * 2016/12/26 0.1         Step1リリース                                     CSC
 ******************************************************************************
 */
/**
 ******************************************************************************
 * @brief     セレクトボックスコンポーネント
 * @param     {jQuery} containerDiv 格納先のdiv要素
 * @param     {Object} attr         inputに追加適用する属性
 * @param     {Object} prop         inputに追加適用する属性
 * @return
 * @retval
 * @attention
 * @note      セレクトボックスコンポーネント
 * ----------------------------------------------------------------------------
 * VER.        DESCRIPTION                                               AUTHOR
 * ----------------------------------------------------------------------------
 ******************************************************************************
 */
var McsSelectBox = function(containerDiv, attr, prop) {
  // コンストラクタ
  this.init(containerDiv, attr, prop);
};
// メソッド類
McsSelectBox.prototype = {
  /**
   ******************************************************************************
   * @brief     初期化
   * @param     {jQuery} containerDiv 格納先のdiv要素
   * @param     {Object} attr         inputに追加適用する属性
   * @param     {Object} prop         inputに追加適用する属性
   * @return
   * @retval
   * @attention
   * @note      初期化する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  init: function(containerDiv, attr, prop) {
    this.containerDiv = containerDiv;
    // 実際の要素を生成
    var input = $('<select class="selectpicker mcs-selectpicker" ></select>');
    input.attr('data-none-selected-text', '-');
    input.attr('data-size', 'auto');
    input.attr('data-margin-top', $('.mcs-content, .mcs-content-top').offset().top + 10);
    if (attr)
      input.attr(attr);
    if (prop)
      input.prop(prop);
    this.input = input;
    // containerDivに追加する
    containerDiv.append(input);
    // select要素を横幅100%で表示するために、containerDivにクラスを追加する
    containerDiv.addClass('mcs-selectbox-container');
  },

  /**
   ******************************************************************************
   * @brief     プルダウンリスト取得
   * @param
   * @return    {Array} プルダウンリストの要素([[value, text], ...])
   * @retval
   * @attention
   * @note      プルダウンリストの要素を返す
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getList: function() {
    var list = [];
    this.input.find('option').each(function(index, element) {
      list[index] = [element.value, element.text];
    });
    return list;
  },

  /**
   ******************************************************************************
   * @brief     プルダウンリスト設定
   * @param   {Array} selectList 追加するデータのリスト['Value属性','コンテンツ']
   * @return {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      プルダウンリストを設定する
   *    設定する前に、一度リストをクリアする。末尾に追加したい場合は、addListを使用すること。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setList: function(selectList) {
    this.clearList();
    return this.addList(selectList);
  },

  /**
   ******************************************************************************
   * @brief     プルダウンリスト追加
   * @param  {Array} selectList 追加するデータのリスト['Value属性','コンテンツ']
   * @return    {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      プルダウンリストに追加する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  addList: function(selectList) {
    for (var i = 0; i < selectList.length; i++) {
      var option = $('<option />');
      option.val(selectList[i][0]);
      option.text(selectList[i][1]);
      this.input.append(option);
    }
    this.input.selectpicker('refresh');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     プルダウンリストクリア
   * @param
   * @return
   * @retval
   * @attention
   * @note      プルダウンリストの内容をクリアする。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clearList: function() {
    this.input.find('option').remove();
    this.input.selectpicker('refresh');
  },

  /**
   ******************************************************************************
   * @brief     Value属性値取得
   * @param
   * @return   {String} Value属性値
   * @retval
   * @attention
   * @note      選択中データのValue属性値を返す。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getValue: function() {
    var selectVal = this.input.val();
    return selectVal;
  },

  /**
   ******************************************************************************
   * @brief     テキスト値取得
   * @param
   * @return   {String} テキスト
   * @retval
   * @attention
   * @note      選択中データのテキストを返す。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getText: function() {
    var selectText = this.input.find('option:selected').text();
    return selectText;
  },

  /**
   ******************************************************************************
   * @brief     Value属性値設定
   * @param   {String} value valueの値
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      引数のValue属性値をセレクト要素へセットする。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setValue: function(value) {
    this.input.val(value).selectpicker('refresh');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     選択値初期化
   * @param
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      選択を初期化する（一番上が選択された状態になる）
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clear: function() {
    this.input.find('option:first').prop('selected', true);
    this.input.selectpicker('refresh');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     選択値変更
   * @param  {Function} callback コールバック
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスの選択値変更イベントを設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  onChange: function(callback) {
    this.input.on('change.mcsselectbox', callback);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     選択値変更イベントクリア
   * @param
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      選択値変更イベントの設定をクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clearOnChange: function() {
    this.input.off('change.mcsselectbox');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス開始直前イベント設定
   * @param  {Function} callback コールバック
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが開く直前のイベントを設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  onShow: function(callback) {
    this.input.on('show.bs.select', callback);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス開始直前イベントクリア
   * @param
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが開く直前のイベントの設定をクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  offShow: function() {
    this.input.off('show.bs.select');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス開始直後イベント設定
   * @param  {Function} callback コールバック
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが開いた直後のイベントを設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  onShown: function(callback) {
    this.input.on('shown.bs.select', callback);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス開始直後イベントクリア
   * @param
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが開いた直後のイベントの設定をクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  offShown: function() {
    this.input.off('shown.bs.select');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス終了直前イベント設定
   * @param  {Function} callback コールバック
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが閉じる直前のイベントを設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  onHide: function(callback) {
    this.input.on('hide.bs.select', callback);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス終了直前イベントクリア
   * @param
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが閉じる直前のイベントの設定をクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  offHide: function() {
    this.input.off('hide.bs.select');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス終了直後イベント設定
   * @param  {Function} callback コールバック
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが閉じた直後のイベントを設定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  onHidden: function(callback) {
    this.input.on('hidden.bs.select', callback);
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス終了直後イベント設定クリア
   * @param
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスが閉じた直後のイベントの設定をクリアする
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  offHidden: function() {
    this.input.off('hidden.bs.select');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     セレクトボックス開始判定
   * @param
   * @return   {Boolean} 開いているならtrue、閉じているならfalse
   * @retval
   * @attention
   * @note      セレクトボックスが開いているかを判定する
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  isOpening: function() {
    if (this.containerDiv.find('button[aria-expanded=true]')[0]) {
      return true;
    }
    return false;
  },

  /**
   ******************************************************************************
   * @brief     活性・非活性設定
   * @param  {Boolean} enabled 活性ならtrue、非活性ならfalse
   * @return   {McsSelectBox} このコンポーネント
   * @retval
   * @attention
   * @note      セレクトボックスの活性・非活性を設定する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  setEnabled: function(enabled) {
    this.input.prop('disabled', !enabled);
    this.input.selectpicker('refresh');
    return this;
  },

  /**
   ******************************************************************************
   * @brief     活性状態取得
   * @param
   * @return   {Boolean} 活性ならtrue、非活性ならfalse
   * @retval
   * @attention
   * @note      セレクトボックスの活性・非活性を取得する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getEnabled: function() {
    return !this.input.prop('disabled');
  },

  /**
   ******************************************************************************
   * @brief     エラー表示
   * @param  {String} errorMessage エラーメッセージ
   * @return
   * @retval
   * @attention
   * @note      セレクトボックス下部へエラーメッセージを表示する。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  addError: function(errorMessage) {
    var elm = $('<div class="mcs-component-errorText"></div>').text(errorMessage);
    this.containerDiv.append(elm);
    this.containerDiv.find('.dropdown-toggle').addClass('mcs-component-errorBack');
  },

  /**
   ******************************************************************************
   * @brief     エラー表示クリア
   * @param
   * @return
   * @retval
   * @attention
   * @note      セレクトボックス下部のエラーメッセージをクリアする。
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  clearError: function() {
    this.containerDiv.find('.mcs-component-errorText').remove();
    this.containerDiv.find('.dropdown-toggle').removeClass('mcs-component-errorBack');
  },

  /**
   ******************************************************************************
   * @brief     jQueryオブジェクトを取得
   * @param
   * @return    {jQueryObj} jQueryオブジェクト
   * @retval
   * @attention
   * @note      jQueryオブジェクトを返す。 （注意：なるべく使用しないこと）
   * ----------------------------------------------------------------------------
   * VER.        DESCRIPTION                                               AUTHOR
   * ----------------------------------------------------------------------------
   ******************************************************************************
   */
  getJq: function() {
    return this.input;
  },

  end: 'end' // 終端ダミー
};
